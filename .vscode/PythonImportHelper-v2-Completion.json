[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "glob",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "glob",
        "description": "glob",
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "sysconfig",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sysconfig",
        "description": "sysconfig",
        "detail": "sysconfig",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "typing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "typing",
        "description": "typing",
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TextIO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "venv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "venv",
        "description": "venv",
        "detail": "venv",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "UUID4",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Extra",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Engine",
        "importPath": "sqlalchemy.engine.base",
        "description": "sqlalchemy.engine.base",
        "isExtraImport": true,
        "detail": "sqlalchemy.engine.base",
        "documentation": {}
    },
    {
        "label": "Engine",
        "importPath": "sqlalchemy.engine.base",
        "description": "sqlalchemy.engine.base",
        "isExtraImport": true,
        "detail": "sqlalchemy.engine.base",
        "documentation": {}
    },
    {
        "label": "Engine",
        "importPath": "sqlalchemy.engine.base",
        "description": "sqlalchemy.engine.base",
        "isExtraImport": true,
        "detail": "sqlalchemy.engine.base",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "SQLModel",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "SQLModel",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "VARCHAR",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "Relationship",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "SQLModel",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "BOOLEAN",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "Relationship",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "SQLModel",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "TestItem",
        "importPath": "testspace.models.testitem",
        "description": "testspace.models.testitem",
        "isExtraImport": true,
        "detail": "testspace.models.testitem",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Omit",
        "importPath": "testspace.utils.pydantictools",
        "description": "testspace.utils.pydantictools",
        "isExtraImport": true,
        "detail": "testspace.utils.pydantictools",
        "documentation": {}
    },
    {
        "label": "Partial",
        "importPath": "testspace.utils.pydantictools",
        "description": "testspace.utils.pydantictools",
        "isExtraImport": true,
        "detail": "testspace.utils.pydantictools",
        "documentation": {}
    },
    {
        "label": "Omit",
        "importPath": "testspace.utils.pydantictools",
        "description": "testspace.utils.pydantictools",
        "isExtraImport": true,
        "detail": "testspace.utils.pydantictools",
        "documentation": {}
    },
    {
        "label": "oauth2_scheme",
        "importPath": "testspace.components.auth",
        "description": "testspace.components.auth",
        "isExtraImport": true,
        "detail": "testspace.components.auth",
        "documentation": {}
    },
    {
        "label": "get_password_hash",
        "importPath": "testspace.components.auth",
        "description": "testspace.components.auth",
        "isExtraImport": true,
        "detail": "testspace.components.auth",
        "documentation": {}
    },
    {
        "label": "oauth2_scheme",
        "importPath": "testspace.components.auth",
        "description": "testspace.components.auth",
        "isExtraImport": true,
        "detail": "testspace.components.auth",
        "documentation": {}
    },
    {
        "label": "setup_auth_component",
        "importPath": "testspace.components.auth",
        "description": "testspace.components.auth",
        "isExtraImport": true,
        "detail": "testspace.components.auth",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "testspace.db.session",
        "description": "testspace.db.session",
        "isExtraImport": true,
        "detail": "testspace.db.session",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "testspace.db.session",
        "description": "testspace.db.session",
        "isExtraImport": true,
        "detail": "testspace.db.session",
        "documentation": {}
    },
    {
        "label": "get_engine",
        "importPath": "testspace.db.session",
        "description": "testspace.db.session",
        "isExtraImport": true,
        "detail": "testspace.db.session",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "testspace.models.user",
        "description": "testspace.models.user",
        "isExtraImport": true,
        "detail": "testspace.models.user",
        "documentation": {}
    },
    {
        "label": "UserGroup",
        "importPath": "testspace.models.user",
        "description": "testspace.models.user",
        "isExtraImport": true,
        "detail": "testspace.models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "testspace.models.user",
        "description": "testspace.models.user",
        "isExtraImport": true,
        "detail": "testspace.models.user",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordBearer",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordRequestForm",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordBearer",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordRequestForm",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "JWTError",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "VARCHAR",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "TomlConfig",
        "importPath": "testspace.config",
        "description": "testspace.config",
        "isExtraImport": true,
        "detail": "testspace.config",
        "documentation": {}
    },
    {
        "label": "tomlconfig",
        "importPath": "testspace.config",
        "description": "testspace.config",
        "isExtraImport": true,
        "detail": "testspace.config",
        "documentation": {}
    },
    {
        "label": "tomlconfig",
        "importPath": "testspace.config",
        "description": "testspace.config",
        "isExtraImport": true,
        "detail": "testspace.config",
        "documentation": {}
    },
    {
        "label": "tomlconfig",
        "importPath": "testspace.config",
        "description": "testspace.config",
        "isExtraImport": true,
        "detail": "testspace.config",
        "documentation": {}
    },
    {
        "label": "DATA_DIR",
        "importPath": "testspace.config",
        "description": "testspace.config",
        "isExtraImport": true,
        "detail": "testspace.config",
        "documentation": {}
    },
    {
        "label": "TomlConfig",
        "importPath": "testspace.config",
        "description": "testspace.config",
        "isExtraImport": true,
        "detail": "testspace.config",
        "documentation": {}
    },
    {
        "label": "CryptContext",
        "importPath": "passlib.context",
        "description": "passlib.context",
        "isExtraImport": true,
        "detail": "passlib.context",
        "documentation": {}
    },
    {
        "label": "aioredis",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "aioredis",
        "description": "aioredis",
        "detail": "aioredis",
        "documentation": {}
    },
    {
        "label": "Redis",
        "importPath": "aioredis",
        "description": "aioredis",
        "isExtraImport": true,
        "detail": "aioredis",
        "documentation": {}
    },
    {
        "label": "TypeWeakRef",
        "importPath": "testspace.utils.TypeWeakref",
        "description": "testspace.utils.TypeWeakref",
        "isExtraImport": true,
        "detail": "testspace.utils.TypeWeakref",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "testspace.log",
        "description": "testspace.log",
        "isExtraImport": true,
        "detail": "testspace.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "testspace.log",
        "description": "testspace.log",
        "isExtraImport": true,
        "detail": "testspace.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "testspace.log",
        "description": "testspace.log",
        "isExtraImport": true,
        "detail": "testspace.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "testspace.log",
        "description": "testspace.log",
        "isExtraImport": true,
        "detail": "testspace.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "testspace.log",
        "description": "testspace.log",
        "isExtraImport": true,
        "detail": "testspace.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "testspace.log",
        "description": "testspace.log",
        "isExtraImport": true,
        "detail": "testspace.log",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "AntdErrorResponse",
        "importPath": "testspace.exceptions",
        "description": "testspace.exceptions",
        "isExtraImport": true,
        "detail": "testspace.exceptions",
        "documentation": {}
    },
    {
        "label": "ShowType",
        "importPath": "testspace.exceptions",
        "description": "testspace.exceptions",
        "isExtraImport": true,
        "detail": "testspace.exceptions",
        "documentation": {}
    },
    {
        "label": "PubSubEndpoint",
        "importPath": "fastapi_websocket_pubsub",
        "description": "fastapi_websocket_pubsub",
        "isExtraImport": true,
        "detail": "fastapi_websocket_pubsub",
        "documentation": {}
    },
    {
        "label": "get_redoc_html",
        "importPath": "fastapi.openapi.docs",
        "description": "fastapi.openapi.docs",
        "isExtraImport": true,
        "detail": "fastapi.openapi.docs",
        "documentation": {}
    },
    {
        "label": "get_swagger_ui_html",
        "importPath": "fastapi.openapi.docs",
        "description": "fastapi.openapi.docs",
        "isExtraImport": true,
        "detail": "fastapi.openapi.docs",
        "documentation": {}
    },
    {
        "label": "get_swagger_ui_oauth2_redirect_html",
        "importPath": "fastapi.openapi.docs",
        "description": "fastapi.openapi.docs",
        "isExtraImport": true,
        "detail": "fastapi.openapi.docs",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "create_database",
        "importPath": "sqlalchemy_utils",
        "description": "sqlalchemy_utils",
        "isExtraImport": true,
        "detail": "sqlalchemy_utils",
        "documentation": {}
    },
    {
        "label": "database_exists",
        "importPath": "sqlalchemy_utils",
        "description": "sqlalchemy_utils",
        "isExtraImport": true,
        "detail": "sqlalchemy_utils",
        "documentation": {}
    },
    {
        "label": "Select",
        "importPath": "sqlmodel.sql.expression",
        "description": "sqlmodel.sql.expression",
        "isExtraImport": true,
        "detail": "sqlmodel.sql.expression",
        "documentation": {}
    },
    {
        "label": "SelectOfScalar",
        "importPath": "sqlmodel.sql.expression",
        "description": "sqlmodel.sql.expression",
        "isExtraImport": true,
        "detail": "sqlmodel.sql.expression",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "JSON",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "ARRAY",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "JSON",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "backref",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "ContextVar",
        "importPath": "contextvars",
        "description": "contextvars",
        "isExtraImport": true,
        "detail": "contextvars",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "pathlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pathlib",
        "description": "pathlib",
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "importlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "importlib",
        "description": "importlib",
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "importlib.machinery",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "importlib.machinery",
        "description": "importlib.machinery",
        "detail": "importlib.machinery",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "ModuleType",
        "importPath": "types",
        "description": "types",
        "isExtraImport": true,
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "isclass",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "copy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "copy",
        "description": "copy",
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "weakref",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "weakref",
        "description": "weakref",
        "detail": "weakref",
        "documentation": {}
    },
    {
        "label": "Env",
        "importPath": "environs",
        "description": "environs",
        "isExtraImport": true,
        "detail": "environs",
        "documentation": {}
    },
    {
        "label": "DotMap",
        "importPath": "dotmap",
        "description": "dotmap",
        "isExtraImport": true,
        "detail": "dotmap",
        "documentation": {}
    },
    {
        "label": "toml",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "toml",
        "description": "toml",
        "detail": "toml",
        "documentation": {}
    },
    {
        "label": "IntEnum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "create_app",
        "importPath": "testspace.setup",
        "description": "testspace.setup",
        "isExtraImport": true,
        "detail": "testspace.setup",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "RichHandler",
        "importPath": "rich.logging",
        "description": "rich.logging",
        "isExtraImport": true,
        "detail": "rich.logging",
        "documentation": {}
    },
    {
        "label": "RichHandler",
        "importPath": "rich.logging",
        "description": "rich.logging",
        "isExtraImport": true,
        "detail": "rich.logging",
        "documentation": {}
    },
    {
        "label": "StaticFiles",
        "importPath": "fastapi.staticfiles",
        "description": "fastapi.staticfiles",
        "isExtraImport": true,
        "detail": "fastapi.staticfiles",
        "documentation": {}
    },
    {
        "label": "HTMLResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "RedirectResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "antd_adapter",
        "importPath": "testspace.components.middleware",
        "description": "testspace.components.middleware",
        "isExtraImport": true,
        "detail": "testspace.components.middleware",
        "documentation": {}
    },
    {
        "label": "setup_swagger_ui",
        "importPath": "testspace.components.swaggerui",
        "description": "testspace.components.swaggerui",
        "isExtraImport": true,
        "detail": "testspace.components.swaggerui",
        "documentation": {}
    },
    {
        "label": "register_redis",
        "importPath": "testspace.components.cache",
        "description": "testspace.components.cache",
        "isExtraImport": true,
        "detail": "testspace.components.cache",
        "documentation": {}
    },
    {
        "label": "create_schema",
        "importPath": "testspace.db.Base",
        "description": "testspace.db.Base",
        "isExtraImport": true,
        "detail": "testspace.db.Base",
        "documentation": {}
    },
    {
        "label": "drop_all_schema",
        "importPath": "testspace.db.Base",
        "description": "testspace.db.Base",
        "isExtraImport": true,
        "detail": "testspace.db.Base",
        "documentation": {}
    },
    {
        "label": "register_routers",
        "importPath": "testspace.apimanager",
        "description": "testspace.apimanager",
        "isExtraImport": true,
        "detail": "testspace.apimanager",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "find_packages",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "Tee",
        "kind": 6,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "class Tee:\n    def __init__(self, file):\n        self.f = file\n    def write(self, what):\n        if self.f is not None:\n            try:\n                self.f.write(what.replace(\"\\n\", \"\\r\\n\"))\n            except IOError:\n                pass\n        tee_f.write(what)",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "CopyTo",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def CopyTo(desc, src, dest):\n    import win32api, win32con\n    while 1:\n        try:\n            win32api.CopyFile(src, dest, 0)\n            return\n        except win32api.error as details:\n            if details.winerror == 5:  # access denied - user not admin.\n                raise\n            if silent:",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "LoadSystemModule",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def LoadSystemModule(lib_dir, modname):\n    # See if this is a debug build.\n    import importlib.util, importlib.machinery\n    suffix = \"_d\" if \"_d.pyd\" in importlib.machinery.EXTENSION_SUFFIXES else \"\"\n    filename = \"%s%d%d%s.dll\" % (\n        modname,\n        sys.version_info[0],\n        sys.version_info[1],\n        suffix,\n    )",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "SetPyKeyVal",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def SetPyKeyVal(key_name, value_name, value):\n    root_hkey = get_root_hkey()\n    root_key = winreg.OpenKey(root_hkey, root_key_name)\n    try:\n        my_key = winreg.CreateKey(root_key, key_name)\n        try:\n            winreg.SetValueEx(my_key, value_name, 0, winreg.REG_SZ, value)\n            if verbose:\n                print(\"-> %s\\\\%s[%s]=%r\" % (root_key_name, key_name, value_name, value))\n        finally:",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "UnsetPyKeyVal",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def UnsetPyKeyVal(key_name, value_name, delete_key=False):\n    root_hkey = get_root_hkey()\n    root_key = winreg.OpenKey(root_hkey, root_key_name)\n    try:\n        my_key = winreg.OpenKey(root_key, key_name, 0, winreg.KEY_SET_VALUE)\n        try:\n            winreg.DeleteValue(my_key, value_name)\n            if verbose:\n                print(\"-> DELETE %s\\\\%s[%s]\" % (root_key_name, key_name, value_name))\n        finally:",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterCOMObjects",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterCOMObjects(register=True):\n    import win32com.server.register\n    if register:\n        func = win32com.server.register.RegisterClasses\n    else:\n        func = win32com.server.register.UnregisterClasses\n    flags = {}\n    if not verbose:\n        flags[\"quiet\"] = 1\n    for module, klass_name in com_modules:",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterHelpFile",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterHelpFile(register=True, lib_dir=None):\n    if lib_dir is None:\n        lib_dir = sysconfig.get_paths()[\"platlib\"]\n    if register:\n        # Register the .chm help file.\n        chm_file = os.path.join(lib_dir, \"PyWin32.chm\")\n        if os.path.isfile(chm_file):\n            # This isn't recursive, so if 'Help' doesn't exist, we croak\n            SetPyKeyVal(\"Help\", None, None)\n            SetPyKeyVal(\"Help\\\\Pythonwin Reference\", None, chm_file)",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterPythonwin",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterPythonwin(register=True, lib_dir=None):\n    \"\"\"Add (or remove) Pythonwin to context menu for python scripts.\n    ??? Should probably also add Edit command for pys files also.\n    Also need to remove these keys on uninstall, but there's no function\n        like file_created to add registry entries to uninstall log ???\n    \"\"\"\n    import os\n    if lib_dir is None:\n        lib_dir = sysconfig.get_paths()[\"platlib\"]\n    classes_root = get_root_hkey()",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_shortcuts_folder",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_shortcuts_folder():\n    if get_root_hkey() == winreg.HKEY_LOCAL_MACHINE:\n        try:\n            fldr = get_special_folder_path(\"CSIDL_COMMON_PROGRAMS\")\n        except OSError:\n            # No CSIDL_COMMON_PROGRAMS on this platform\n            fldr = get_special_folder_path(\"CSIDL_PROGRAMS\")\n    else:\n        # non-admin install - always goes in this user's start menu.\n        fldr = get_special_folder_path(\"CSIDL_PROGRAMS\")",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_system_dir",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_system_dir():\n    import win32api  # we assume this exists.\n    try:\n        import pythoncom\n        import win32process\n        from win32com.shell import shell, shellcon\n        try:\n            if win32process.IsWow64Process():\n                return shell.SHGetSpecialFolderPath(0, shellcon.CSIDL_SYSTEMX86)\n            return shell.SHGetSpecialFolderPath(0, shellcon.CSIDL_SYSTEM)",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "fixup_dbi",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def fixup_dbi():\n    # We used to have a dbi.pyd with our .pyd files, but now have a .py file.\n    # If the user didn't uninstall, they will find the .pyd which will cause\n    # problems - so handle that.\n    import win32api, win32con\n    pyd_name = os.path.join(os.path.dirname(win32api.__file__), \"dbi.pyd\")\n    pyd_d_name = os.path.join(os.path.dirname(win32api.__file__), \"dbi_d.pyd\")\n    py_name = os.path.join(os.path.dirname(win32con.__file__), \"dbi.py\")\n    for this_pyd in (pyd_name, pyd_d_name):\n        this_dest = this_pyd + \".old\"",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "install",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def install(lib_dir):\n    import traceback\n    # The .pth file is now installed as a regular file.\n    # Create the .pth file in the site-packages dir, and use only relative paths\n    # We used to write a .pth directly to sys.prefix - clobber it.\n    if os.path.isfile(os.path.join(sys.prefix, \"pywin32.pth\")):\n        os.unlink(os.path.join(sys.prefix, \"pywin32.pth\"))\n    # The .pth may be new and therefore not loaded in this session.\n    # Setup the paths just in case.\n    for name in \"win32 win32\\\\lib Pythonwin\".split():",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "uninstall",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def uninstall(lib_dir):\n    # First ensure our system modules are loaded from pywin32_system, so\n    # we can remove the ones we copied...\n    LoadSystemModule(lib_dir, \"pywintypes\")\n    LoadSystemModule(lib_dir, \"pythoncom\")\n    try:\n        RegisterCOMObjects(False)\n    except Exception as why:\n        print(\"Failed to unregister COM objects: %s\" % (why,))\n    try:",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "verify_destination",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def verify_destination(location):\n    if not os.path.isdir(location):\n        raise argparse.ArgumentTypeError('Path \"{}\" does not exist!'.format(location))\n    return location\ndef main():\n    import argparse\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.RawDescriptionHelpFormatter,\n        description=\"\"\"A post-install script for the pywin32 extensions.\n    * Typical usage:",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def main():\n    import argparse\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.RawDescriptionHelpFormatter,\n        description=\"\"\"A post-install script for the pywin32 extensions.\n    * Typical usage:\n    > python pywin32_postinstall.py -install\n    If you installed pywin32 via a .exe installer, this should be run\n    automatically after installation, but if it fails you can run it again.\n    If you installed pywin32 via PIP, you almost certainly need to run this to",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "tee_f",
        "kind": 5,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "tee_f = open(os.path.join(tempfile.gettempdir(), \"pywin32_postinstall.log\"), \"w\")\nclass Tee:\n    def __init__(self, file):\n        self.f = file\n    def write(self, what):\n        if self.f is not None:\n            try:\n                self.f.write(what.replace(\"\\n\", \"\\r\\n\"))\n            except IOError:\n                pass",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "sys.stderr",
        "kind": 5,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "sys.stderr = Tee(sys.stderr)\nsys.stdout = Tee(sys.stdout)\ncom_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "sys.stdout",
        "kind": 5,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "sys.stdout = Tee(sys.stdout)\ncom_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'\nsilent = 0",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "com_modules",
        "kind": 5,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "com_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'\nsilent = 0\n# Verbosity of output messages.",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "silent",
        "kind": 5,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "silent = 0\n# Verbosity of output messages.\nverbose = 1\nroot_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ntry:\n    # When this script is run from inside the bdist_wininst installer,\n    # file_created() and directory_created() are additional builtin\n    # functions which write lines to Python23\\pywin32-install.log. This is\n    # a list of actions for the uninstaller, the format is inspired by what\n    # the Wise installer also creates.",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "verbose",
        "kind": 5,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "verbose = 1\nroot_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ntry:\n    # When this script is run from inside the bdist_wininst installer,\n    # file_created() and directory_created() are additional builtin\n    # functions which write lines to Python23\\pywin32-install.log. This is\n    # a list of actions for the uninstaller, the format is inspired by what\n    # the Wise installer also creates.\n    file_created\n    is_bdist_wininst = True",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "root_key_name",
        "kind": 5,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "root_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ntry:\n    # When this script is run from inside the bdist_wininst installer,\n    # file_created() and directory_created() are additional builtin\n    # functions which write lines to Python23\\pywin32-install.log. This is\n    # a list of actions for the uninstaller, the format is inspired by what\n    # the Wise installer also creates.\n    file_created\n    is_bdist_wininst = True\nexcept NameError:",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "run_test",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_testall",
        "description": ".venv.Scripts.pywin32_testall",
        "peekOfCode": "def run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras\n    result = subprocess.run(cmd, check=False, cwd=dirname)\n    print(\"*** Test script '%s' exited with %s\" % (script, result.returncode))\n    sys.stdout.flush()\n    if result.returncode:\n        failures.append(script)\ndef find_and_run(possible_locations, extras):",
        "detail": ".venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "find_and_run",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_testall",
        "description": ".venv.Scripts.pywin32_testall",
        "peekOfCode": "def find_and_run(possible_locations, extras):\n    for maybe in possible_locations:\n        if os.path.isfile(maybe):\n            run_test(maybe, extras)\n            break\n    else:\n        raise RuntimeError(\n            \"Failed to locate a test script in one of %s\" % possible_locations\n        )\ndef main():",
        "detail": ".venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_testall",
        "description": ".venv.Scripts.pywin32_testall",
        "peekOfCode": "def main():\n    import argparse\n    code_directories = [this_dir] + site_packages\n    parser = argparse.ArgumentParser(\n        description=\"A script to trigger tests in all subprojects of PyWin32.\"\n    )\n    parser.add_argument(\n        \"-no-user-interaction\",\n        default=False,\n        action=\"store_true\",",
        "detail": ".venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "this_dir",
        "kind": 5,
        "importPath": ".venv.Scripts.pywin32_testall",
        "description": ".venv.Scripts.pywin32_testall",
        "peekOfCode": "this_dir = os.path.dirname(__file__)\nsite_packages = [\n    site.getusersitepackages(),\n] + site.getsitepackages()\nfailures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)",
        "detail": ".venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "site_packages",
        "kind": 5,
        "importPath": ".venv.Scripts.pywin32_testall",
        "description": ".venv.Scripts.pywin32_testall",
        "peekOfCode": "site_packages = [\n    site.getusersitepackages(),\n] + site.getsitepackages()\nfailures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.",
        "detail": ".venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "failures",
        "kind": 5,
        "importPath": ".venv.Scripts.pywin32_testall",
        "description": ".venv.Scripts.pywin32_testall",
        "peekOfCode": "failures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras\n    result = subprocess.run(cmd, check=False, cwd=dirname)\n    print(\"*** Test script '%s' exited with %s\" % (script, result.returncode))",
        "detail": ".venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "src.testspace.api.testitem",
        "description": "src.testspace.api.testitem",
        "peekOfCode": "router = APIRouter(tags=[\"testitem management\"],dependencies=[Depends(oauth2_scheme)])\nTestItemAdd = Omit[\"TestItemAdd\",TestItem,\"uuid\",\"id\",\"parent_id\"]\nTestItemUpdate = Partial[\"TestItemUpdate\",TestItemAdd]\n@router.post(\"/\",response_model=TestItem)\nasync def add(item:TestItemAdd):\n    with Session(engine) as s:\n        _item = TestItem(**item.dict(exclude_unset=True))\n        s.add(_item)\n        s.commit()\n        s.refresh(_item)",
        "detail": "src.testspace.api.testitem",
        "documentation": {}
    },
    {
        "label": "TestItemAdd",
        "kind": 5,
        "importPath": "src.testspace.api.testitem",
        "description": "src.testspace.api.testitem",
        "peekOfCode": "TestItemAdd = Omit[\"TestItemAdd\",TestItem,\"uuid\",\"id\",\"parent_id\"]\nTestItemUpdate = Partial[\"TestItemUpdate\",TestItemAdd]\n@router.post(\"/\",response_model=TestItem)\nasync def add(item:TestItemAdd):\n    with Session(engine) as s:\n        _item = TestItem(**item.dict(exclude_unset=True))\n        s.add(_item)\n        s.commit()\n        s.refresh(_item)\n        return _item",
        "detail": "src.testspace.api.testitem",
        "documentation": {}
    },
    {
        "label": "TestItemUpdate",
        "kind": 5,
        "importPath": "src.testspace.api.testitem",
        "description": "src.testspace.api.testitem",
        "peekOfCode": "TestItemUpdate = Partial[\"TestItemUpdate\",TestItemAdd]\n@router.post(\"/\",response_model=TestItem)\nasync def add(item:TestItemAdd):\n    with Session(engine) as s:\n        _item = TestItem(**item.dict(exclude_unset=True))\n        s.add(_item)\n        s.commit()\n        s.refresh(_item)\n        return _item\n# @router.get(\"/\",response_model=List[TestItem])",
        "detail": "src.testspace.api.testitem",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "src.testspace.api.user",
        "description": "src.testspace.api.user",
        "peekOfCode": "router = APIRouter(tags=[\"usermanagement\"],dependencies=[Depends(oauth2_scheme)])\nUserModel = Omit[\"UserModel\", User, \"password\"]\n@router.post(\"/\",response_model=UserModel)\nasync def add_user(user: Omit[\"UserCreate\",User,\"uuid\",\"id\"]):\n    new_user  = User(**user.dict(exclude_unset=True))\n    new_user.password =  get_password_hash(new_user.password)\n    with Session(engine) as s:\n        s.add(new_user)\n        s.commit()\n        s.refresh(new_user)",
        "detail": "src.testspace.api.user",
        "documentation": {}
    },
    {
        "label": "UserModel",
        "kind": 5,
        "importPath": "src.testspace.api.user",
        "description": "src.testspace.api.user",
        "peekOfCode": "UserModel = Omit[\"UserModel\", User, \"password\"]\n@router.post(\"/\",response_model=UserModel)\nasync def add_user(user: Omit[\"UserCreate\",User,\"uuid\",\"id\"]):\n    new_user  = User(**user.dict(exclude_unset=True))\n    new_user.password =  get_password_hash(new_user.password)\n    with Session(engine) as s:\n        s.add(new_user)\n        s.commit()\n        s.refresh(new_user)\n        return new_user",
        "detail": "src.testspace.api.user",
        "documentation": {}
    },
    {
        "label": "Token",
        "kind": 6,
        "importPath": "src.testspace.components.auth",
        "description": "src.testspace.components.auth",
        "peekOfCode": "class Token(BaseModel):\n    access_token: str\n    token_type: str\ndef verify_password(plain_password:str, hashed_password:str):\n    return crypt_context.verify(plain_password, hashed_password)\ndef get_password_hash(password:str):\n    return crypt_context.hash(password.encode(\"utf-8\"))\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:",
        "detail": "src.testspace.components.auth",
        "documentation": {}
    },
    {
        "label": "verify_password",
        "kind": 2,
        "importPath": "src.testspace.components.auth",
        "description": "src.testspace.components.auth",
        "peekOfCode": "def verify_password(plain_password:str, hashed_password:str):\n    return crypt_context.verify(plain_password, hashed_password)\ndef get_password_hash(password:str):\n    return crypt_context.hash(password.encode(\"utf-8\"))\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.utcnow() + expires_delta\n    else:\n        expire = datetime.utcnow() + timedelta(minutes=15)",
        "detail": "src.testspace.components.auth",
        "documentation": {}
    },
    {
        "label": "get_password_hash",
        "kind": 2,
        "importPath": "src.testspace.components.auth",
        "description": "src.testspace.components.auth",
        "peekOfCode": "def get_password_hash(password:str):\n    return crypt_context.hash(password.encode(\"utf-8\"))\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.utcnow() + expires_delta\n    else:\n        expire = datetime.utcnow() + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)",
        "detail": "src.testspace.components.auth",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "kind": 2,
        "importPath": "src.testspace.components.auth",
        "description": "src.testspace.components.auth",
        "peekOfCode": "def create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.utcnow() + expires_delta\n    else:\n        expire = datetime.utcnow() + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\nasync def get_current_user(engine:Engine,token: str = Depends(oauth2_scheme)):",
        "detail": "src.testspace.components.auth",
        "documentation": {}
    },
    {
        "label": "get_user",
        "kind": 2,
        "importPath": "src.testspace.components.auth",
        "description": "src.testspace.components.auth",
        "peekOfCode": "def get_user(engine:Engine, username: str):\n    with Session(engine) as s:\n        user = s.exec(select(User).where(User.username == username)).first()\n        if user:\n            return user\ndef authenticate_user(engine:Engine,username: str, password: str):\n    with Session(engine) as s:\n        user = s.exec(select(User).where(User.username == username)).first()\n    if not user:\n        return False",
        "detail": "src.testspace.components.auth",
        "documentation": {}
    },
    {
        "label": "authenticate_user",
        "kind": 2,
        "importPath": "src.testspace.components.auth",
        "description": "src.testspace.components.auth",
        "peekOfCode": "def authenticate_user(engine:Engine,username: str, password: str):\n    with Session(engine) as s:\n        user = s.exec(select(User).where(User.username == username)).first()\n    if not user:\n        return False\n    if not verify_password(password, user.password):\n        return False\n    return user\ndef setup_auth_component(app:FastAPI,engine:Engine):\n    @app.post(\"/token\", response_model=Token)",
        "detail": "src.testspace.components.auth",
        "documentation": {}
    },
    {
        "label": "setup_auth_component",
        "kind": 2,
        "importPath": "src.testspace.components.auth",
        "description": "src.testspace.components.auth",
        "peekOfCode": "def setup_auth_component(app:FastAPI,engine:Engine):\n    @app.post(\"/token\", response_model=Token)\n    async def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends()):\n        user = authenticate_user(engine,form_data.username, form_data.password)\n        if not user:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Incorrect username or password\",\n                headers={\"WWW-Authenticate\": \"Bearer\"},\n            )",
        "detail": "src.testspace.components.auth",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "src.testspace.components.auth",
        "description": "src.testspace.components.auth",
        "peekOfCode": "__all__ = [\"get_password_hash\",\"verify_password\",\"authenticate_user\",\"setup_auth_component\",\"oauth2_scheme\"]\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\ncrypt_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\ndef verify_password(plain_password:str, hashed_password:str):",
        "detail": "src.testspace.components.auth",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "src.testspace.components.auth",
        "description": "src.testspace.components.auth",
        "peekOfCode": "SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\ncrypt_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\ndef verify_password(plain_password:str, hashed_password:str):\n    return crypt_context.verify(plain_password, hashed_password)",
        "detail": "src.testspace.components.auth",
        "documentation": {}
    },
    {
        "label": "ALGORITHM",
        "kind": 5,
        "importPath": "src.testspace.components.auth",
        "description": "src.testspace.components.auth",
        "peekOfCode": "ALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\ncrypt_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\ndef verify_password(plain_password:str, hashed_password:str):\n    return crypt_context.verify(plain_password, hashed_password)\ndef get_password_hash(password:str):",
        "detail": "src.testspace.components.auth",
        "documentation": {}
    },
    {
        "label": "ACCESS_TOKEN_EXPIRE_MINUTES",
        "kind": 5,
        "importPath": "src.testspace.components.auth",
        "description": "src.testspace.components.auth",
        "peekOfCode": "ACCESS_TOKEN_EXPIRE_MINUTES = 30\ncrypt_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\ndef verify_password(plain_password:str, hashed_password:str):\n    return crypt_context.verify(plain_password, hashed_password)\ndef get_password_hash(password:str):\n    return crypt_context.hash(password.encode(\"utf-8\"))",
        "detail": "src.testspace.components.auth",
        "documentation": {}
    },
    {
        "label": "crypt_context",
        "kind": 5,
        "importPath": "src.testspace.components.auth",
        "description": "src.testspace.components.auth",
        "peekOfCode": "crypt_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\ndef verify_password(plain_password:str, hashed_password:str):\n    return crypt_context.verify(plain_password, hashed_password)\ndef get_password_hash(password:str):\n    return crypt_context.hash(password.encode(\"utf-8\"))\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):",
        "detail": "src.testspace.components.auth",
        "documentation": {}
    },
    {
        "label": "oauth2_scheme",
        "kind": 5,
        "importPath": "src.testspace.components.auth",
        "description": "src.testspace.components.auth",
        "peekOfCode": "oauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\ndef verify_password(plain_password:str, hashed_password:str):\n    return crypt_context.verify(plain_password, hashed_password)\ndef get_password_hash(password:str):\n    return crypt_context.hash(password.encode(\"utf-8\"))\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()",
        "detail": "src.testspace.components.auth",
        "documentation": {}
    },
    {
        "label": "RedisWarpper",
        "kind": 6,
        "importPath": "src.testspace.components.cache",
        "description": "src.testspace.components.cache",
        "peekOfCode": "class RedisWarpper():\n    def __init__(self) -> None:\n        self.app:Optional[TypeWeakRef[FastAPI]] = None\n    def __getattr__(self,__name:str):\n        if not self.app:\n            raise Exception(\"not setup  please register redis in app!!!\")\n        return getattr(cast(FastAPI,self.app.get()).state.redis,__name)\n    async def init_from_url(self,url, app:FastAPI):\n        app.state.redis  =  await aioredis.from_url(url)\n        # if await app.state.redis.ping():",
        "detail": "src.testspace.components.cache",
        "documentation": {}
    },
    {
        "label": "register_redis",
        "kind": 2,
        "importPath": "src.testspace.components.cache",
        "description": "src.testspace.components.cache",
        "peekOfCode": "def register_redis(app:FastAPI):\n    @app.on_event(\"startup\")\n    async def on_startup():\n        await redis.init_from_url(tomlconfig.database.REDIS_URL,app)\n        logger.info(f\"redis set up {tomlconfig.database.REDIS_URL}\")\n    @app.on_event(\"shutdown\")\n    async def on_shutdown():\n        await redis.close()",
        "detail": "src.testspace.components.cache",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "src.testspace.components.cache",
        "description": "src.testspace.components.cache",
        "peekOfCode": "__all__ = [\n    'redis',\n    \"register_redis\"\n    ]\nclass RedisWarpper():\n    def __init__(self) -> None:\n        self.app:Optional[TypeWeakRef[FastAPI]] = None\n    def __getattr__(self,__name:str):\n        if not self.app:\n            raise Exception(\"not setup  please register redis in app!!!\")",
        "detail": "src.testspace.components.cache",
        "documentation": {}
    },
    {
        "label": "redis:Union[Redis,RedisWarpper]",
        "kind": 5,
        "importPath": "src.testspace.components.cache",
        "description": "src.testspace.components.cache",
        "peekOfCode": "redis:Union[Redis,RedisWarpper] = RedisWarpper()            \ndef register_redis(app:FastAPI):\n    @app.on_event(\"startup\")\n    async def on_startup():\n        await redis.init_from_url(tomlconfig.database.REDIS_URL,app)\n        logger.info(f\"redis set up {tomlconfig.database.REDIS_URL}\")\n    @app.on_event(\"shutdown\")\n    async def on_shutdown():\n        await redis.close()",
        "detail": "src.testspace.components.cache",
        "documentation": {}
    },
    {
        "label": "antd_adapter",
        "kind": 2,
        "importPath": "src.testspace.components.middleware",
        "description": "src.testspace.components.middleware",
        "peekOfCode": "def antd_adapter(app:FastAPI):\n    @app.middleware(\"http\")\n    async def exception_middleware(request:Request, call_next):\n        start_time = time.time()\n        try:\n            response:Response = await call_next(request)\n        except HTTPException as e:\n            response = Response(content= AntdErrorResponse(\n                success=False,\n                data= repr(e),",
        "detail": "src.testspace.components.middleware",
        "documentation": {}
    },
    {
        "label": "endpoint",
        "kind": 5,
        "importPath": "src.testspace.components.pubsub",
        "description": "src.testspace.components.pubsub",
        "peekOfCode": "endpoint = PubSubEndpoint()",
        "detail": "src.testspace.components.pubsub",
        "documentation": {}
    },
    {
        "label": "setup_swagger_ui",
        "kind": 2,
        "importPath": "src.testspace.components.swaggerui",
        "description": "src.testspace.components.swaggerui",
        "peekOfCode": "def setup_swagger_ui(app:FastAPI):\n    \"\"\"set up static point mount first\"\"\"\n    @app.get(\"/localdocs\", include_in_schema=False)\n    async def custom_swagger_ui_html():\n        return get_swagger_ui_html(\n            openapi_url=app.openapi_url,  # type: ignore\n            title=app.title + \" - Swagger UI\",\n            oauth2_redirect_url=app.swagger_ui_oauth2_redirect_url,\n            # swagger_js_url=BASE_DIR/'static'/'swagger-ui'/'swagger-ui-bundle.js',\n            # swagger_css_url=BASE_DIR/'static'/'swagger-ui'/'swagger-ui.css',",
        "detail": "src.testspace.components.swaggerui",
        "documentation": {}
    },
    {
        "label": "create_schema",
        "kind": 2,
        "importPath": "src.testspace.db.Base",
        "description": "src.testspace.db.Base",
        "peekOfCode": "def create_schema(engine):\n    import testspace\n    from testspace.utils.libautoimport import Module\n    _models = Module(testspace)[\"models\"]\n    for i in _models.iter_children():\n        i.import_module()\n        logger.info(f\"add schema module [bold blue]{i.module_path}[/bold blue]\")\n    SQLModel.metadata.create_all(bind=engine,checkfirst=True)\ndef drop_all_schema(engine):\n    SQLModel.metadata.drop_all(engine)",
        "detail": "src.testspace.db.Base",
        "documentation": {}
    },
    {
        "label": "drop_all_schema",
        "kind": 2,
        "importPath": "src.testspace.db.Base",
        "description": "src.testspace.db.Base",
        "peekOfCode": "def drop_all_schema(engine):\n    SQLModel.metadata.drop_all(engine)",
        "detail": "src.testspace.db.Base",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "src.testspace.db.Base",
        "description": "src.testspace.db.Base",
        "peekOfCode": "__all__ = [\"create_schema\",\"drop_all_schema\"]\nfrom testspace.log import logger\ndef create_schema(engine):\n    import testspace\n    from testspace.utils.libautoimport import Module\n    _models = Module(testspace)[\"models\"]\n    for i in _models.iter_children():\n        i.import_module()\n        logger.info(f\"add schema module [bold blue]{i.module_path}[/bold blue]\")\n    SQLModel.metadata.create_all(bind=engine,checkfirst=True)",
        "detail": "src.testspace.db.Base",
        "documentation": {}
    },
    {
        "label": "get_engine",
        "kind": 2,
        "importPath": "src.testspace.db.session",
        "description": "src.testspace.db.session",
        "peekOfCode": "def get_engine(SQLALCHEMY_DATABASE_URL):\n    global engine\n    if not  database_exists(SQLALCHEMY_DATABASE_URL):\n        create_database(SQLALCHEMY_DATABASE_URL)\n    engine = create_engine(SQLALCHEMY_DATABASE_URL,query_cache_size=1200)\n    try:\n        engine.execute(\"SELECT 1\")\n    except Exception as e :\n        logger.error(f\"connect to db {SQLALCHEMY_DATABASE_URL} failed {repr(e)}\")\n        raise e",
        "detail": "src.testspace.db.session",
        "documentation": {}
    },
    {
        "label": "SelectOfScalar.inherit_cache",
        "kind": 5,
        "importPath": "src.testspace.db.session",
        "description": "src.testspace.db.session",
        "peekOfCode": "SelectOfScalar.inherit_cache = True  # type: ignore\nSelect.inherit_cache = True  # type: ignore\n__all__ = [\n    \"get_engine\",\n    \"engine\"\n]\nengine:Engine \n@cache\ndef get_engine(SQLALCHEMY_DATABASE_URL):\n    global engine",
        "detail": "src.testspace.db.session",
        "documentation": {}
    },
    {
        "label": "Select.inherit_cache",
        "kind": 5,
        "importPath": "src.testspace.db.session",
        "description": "src.testspace.db.session",
        "peekOfCode": "Select.inherit_cache = True  # type: ignore\n__all__ = [\n    \"get_engine\",\n    \"engine\"\n]\nengine:Engine \n@cache\ndef get_engine(SQLALCHEMY_DATABASE_URL):\n    global engine\n    if not  database_exists(SQLALCHEMY_DATABASE_URL):",
        "detail": "src.testspace.db.session",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "src.testspace.db.session",
        "description": "src.testspace.db.session",
        "peekOfCode": "__all__ = [\n    \"get_engine\",\n    \"engine\"\n]\nengine:Engine \n@cache\ndef get_engine(SQLALCHEMY_DATABASE_URL):\n    global engine\n    if not  database_exists(SQLALCHEMY_DATABASE_URL):\n        create_database(SQLALCHEMY_DATABASE_URL)",
        "detail": "src.testspace.db.session",
        "documentation": {}
    },
    {
        "label": "TestItem",
        "kind": 6,
        "importPath": "src.testspace.models.testitem",
        "description": "src.testspace.models.testitem",
        "peekOfCode": "class TestItem(SQLModel, table=True, extra=Extra.allow):\n    id: int = Field(default=None, primary_key=True)\n    uuid: Optional[UUID] = Field(...,sa_column=Column(PGUUID(as_uuid=True),default=uuid4,index=True,unique=True))\n    name: str = Field(...,sa_column=Column(VARCHAR,unique=True))\n    type: Literal[\"TestPlan\",\"TestCase\",\"TestSuite\",\"Free\"] = Field(...,sa_column=Column(VARCHAR,default=\"Free\"))\n    description: str = Field(...,sa_column=Column(Text))\n    property: Mapping[str,str] = Field({},sa_column=Column(JSON(astext_type=True)))\n    labels: List[str] = Field([],regex=\"[a-z_]*\",sa_column=Column(ARRAY(VARCHAR,as_tuple=True)))\n    deleted: bool =  Field(False,sa_column=Column(BOOLEAN,default=False))\n    parent_id: Optional[int] = Field(default=None, foreign_key='testitem.id',nullable=True)",
        "detail": "src.testspace.models.testitem",
        "documentation": {}
    },
    {
        "label": "UserGroupLink",
        "kind": 6,
        "importPath": "src.testspace.models.user",
        "description": "src.testspace.models.user",
        "peekOfCode": "class UserGroupLink(SQLModel, table=True):\n    user_id: Optional[int] = Field(\n        default=None, foreign_key=\"user.id\", primary_key=True\n    )\n    group_id: Optional[int] = Field(\n        default=None, foreign_key=\"usergroup.id\", primary_key=True\n    )\nclass UserGroup(SQLModel,table=True):\n    id: int = Field(default=None, primary_key=True)\n    uuid: UUID = Field(...,sa_column=Column(PGUUID(as_uuid=True),default=uuid4,index=True))",
        "detail": "src.testspace.models.user",
        "documentation": {}
    },
    {
        "label": "UserGroup",
        "kind": 6,
        "importPath": "src.testspace.models.user",
        "description": "src.testspace.models.user",
        "peekOfCode": "class UserGroup(SQLModel,table=True):\n    id: int = Field(default=None, primary_key=True)\n    uuid: UUID = Field(...,sa_column=Column(PGUUID(as_uuid=True),default=uuid4,index=True))\n    name:str\n    property: Mapping[str,str] = Field({},sa_column=Column(JSON(astext_type=True)))\n    users: List[\"User\"] = Relationship(back_populates=\"groups\",link_model=UserGroupLink)\nclass User(SQLModel, table=True):\n    id: int = Field(default=None, primary_key=True)\n    uuid: UUID = Field(...,sa_column=Column(PGUUID(as_uuid=True),default=uuid4,index=True))\n    username: str = Field(...,sa_column=Column(VARCHAR,unique=True,index=True))",
        "detail": "src.testspace.models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "src.testspace.models.user",
        "description": "src.testspace.models.user",
        "peekOfCode": "class User(SQLModel, table=True):\n    id: int = Field(default=None, primary_key=True)\n    uuid: UUID = Field(...,sa_column=Column(PGUUID(as_uuid=True),default=uuid4,index=True))\n    username: str = Field(...,sa_column=Column(VARCHAR,unique=True,index=True))\n    password: str \n    email : Optional[str]\n    phone : Optional[str]\n    active: Optional[bool] = Field(sa_column_kwargs={\"default\":True})\n    admin: Optional[bool] = Field(sa_column_kwargs={\"default\":False})\n    avatar: Optional[str] = Field(sa_column=Column(VARCHAR))",
        "detail": "src.testspace.models.user",
        "documentation": {}
    },
    {
        "label": "ContextWarpper",
        "kind": 6,
        "importPath": "src.testspace.utils.ContextVarsWapper",
        "description": "src.testspace.utils.ContextVarsWapper",
        "peekOfCode": "class ContextWarpper(Generic[T]):\n    def __init__(self,name:str,value:Optional[T]) -> None:\n        self.__var = ContextVar(name,default=value)\n    def __getattr__(self,__name):\n        return getattr(self.__var.get(), __name)\n    def get(self):\n        return self.__var.get()\n    def set(self,value:T):\n        self.__var.set(value)",
        "detail": "src.testspace.utils.ContextVarsWapper",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "src.testspace.utils.ContextVarsWapper",
        "description": "src.testspace.utils.ContextVarsWapper",
        "peekOfCode": "__all__ = [\"ContextWarpper\"]\nT = TypeVar(\"T\")\nclass ContextWarpper(Generic[T]):\n    def __init__(self,name:str,value:Optional[T]) -> None:\n        self.__var = ContextVar(name,default=value)\n    def __getattr__(self,__name):\n        return getattr(self.__var.get(), __name)\n    def get(self):\n        return self.__var.get()\n    def set(self,value:T):",
        "detail": "src.testspace.utils.ContextVarsWapper",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "src.testspace.utils.ContextVarsWapper",
        "description": "src.testspace.utils.ContextVarsWapper",
        "peekOfCode": "T = TypeVar(\"T\")\nclass ContextWarpper(Generic[T]):\n    def __init__(self,name:str,value:Optional[T]) -> None:\n        self.__var = ContextVar(name,default=value)\n    def __getattr__(self,__name):\n        return getattr(self.__var.get(), __name)\n    def get(self):\n        return self.__var.get()\n    def set(self,value:T):\n        self.__var.set(value)",
        "detail": "src.testspace.utils.ContextVarsWapper",
        "documentation": {}
    },
    {
        "label": "curtime",
        "kind": 2,
        "importPath": "src.testspace.utils.gen",
        "description": "src.testspace.utils.gen",
        "peekOfCode": "def curtime():\n    return datetime.datetime.now()\ndef uuid_v4():\n    import uuid\n    return str(uuid.uuid4())\ndef json_str_to_dict(json_str:str)->dict:\n    return json.loads(json_str)\ndef dict_to_json_str(dict_obj:dict)->str:\n    return json.dumps(dict_obj)",
        "detail": "src.testspace.utils.gen",
        "documentation": {}
    },
    {
        "label": "uuid_v4",
        "kind": 2,
        "importPath": "src.testspace.utils.gen",
        "description": "src.testspace.utils.gen",
        "peekOfCode": "def uuid_v4():\n    import uuid\n    return str(uuid.uuid4())\ndef json_str_to_dict(json_str:str)->dict:\n    return json.loads(json_str)\ndef dict_to_json_str(dict_obj:dict)->str:\n    return json.dumps(dict_obj)",
        "detail": "src.testspace.utils.gen",
        "documentation": {}
    },
    {
        "label": "json_str_to_dict",
        "kind": 2,
        "importPath": "src.testspace.utils.gen",
        "description": "src.testspace.utils.gen",
        "peekOfCode": "def json_str_to_dict(json_str:str)->dict:\n    return json.loads(json_str)\ndef dict_to_json_str(dict_obj:dict)->str:\n    return json.dumps(dict_obj)",
        "detail": "src.testspace.utils.gen",
        "documentation": {}
    },
    {
        "label": "dict_to_json_str",
        "kind": 2,
        "importPath": "src.testspace.utils.gen",
        "description": "src.testspace.utils.gen",
        "peekOfCode": "def dict_to_json_str(dict_obj:dict)->str:\n    return json.dumps(dict_obj)",
        "detail": "src.testspace.utils.gen",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "src.testspace.utils.gen",
        "description": "src.testspace.utils.gen",
        "peekOfCode": "__all__ = [\n    \"curtime\",\n    \"uuid_v4\",\n    \"json_str_to_dict\",\n    \"dict_to_json_str\"\n]\ndef curtime():\n    return datetime.datetime.now()\ndef uuid_v4():\n    import uuid",
        "detail": "src.testspace.utils.gen",
        "documentation": {}
    },
    {
        "label": "Module",
        "kind": 6,
        "importPath": "src.testspace.utils.libautoimport",
        "description": "src.testspace.utils.libautoimport",
        "peekOfCode": "class Module:\n    def __init__(self,package:pathlib.Path | ModuleType , parent:Optional[\"Module\"] = None) -> None:\n        self.mark = package\n        self.parent = parent\n    def is_package(self):\n        if self.path.is_dir(): \n            return True\n        return False\n    @property\n    def path(self) -> pathlib.Path:",
        "detail": "src.testspace.utils.libautoimport",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "src.testspace.utils.libautoimport",
        "description": "src.testspace.utils.libautoimport",
        "peekOfCode": "__all__ = [\"Module\"]\nclass Module:\n    def __init__(self,package:pathlib.Path | ModuleType , parent:Optional[\"Module\"] = None) -> None:\n        self.mark = package\n        self.parent = parent\n    def is_package(self):\n        if self.path.is_dir(): \n            return True\n        return False\n    @property",
        "detail": "src.testspace.utils.libautoimport",
        "documentation": {}
    },
    {
        "label": "Partial",
        "kind": 6,
        "importPath": "src.testspace.utils.pydantictools",
        "description": "src.testspace.utils.pydantictools",
        "peekOfCode": "class Partial(BaseModel):\n    def __class_getitem__(cls,items):\n        first_param, *params = items\n        exclude = []\n        if isclass(first_param):\n            if all(params):\n                exclude = params\n                return partial_func_cached(\"_\",first_param,*exclude)\n        return partial_func_cached(first_param,params[0])\nclass Pick(BaseModel):",
        "detail": "src.testspace.utils.pydantictools",
        "documentation": {}
    },
    {
        "label": "Pick",
        "kind": 6,
        "importPath": "src.testspace.utils.pydantictools",
        "description": "src.testspace.utils.pydantictools",
        "peekOfCode": "class Pick(BaseModel):\n    def __class_getitem__(cls,items):\n        \"\"\"Pick[Cls, \"name\",\"property\"]\"\"\"\n        first_param, *params = items\n        if isclass(first_param):\n            params.sort()\n            return pick_func_cached(\"_\", first_param,*params)\n        pick_cls, *pick_params = params\n        pick_params.sort()\n        return pick_func_cached(first_param, pick_cls,*pick_params)",
        "detail": "src.testspace.utils.pydantictools",
        "documentation": {}
    },
    {
        "label": "Omit",
        "kind": 6,
        "importPath": "src.testspace.utils.pydantictools",
        "description": "src.testspace.utils.pydantictools",
        "peekOfCode": "class Omit(BaseModel):\n    \"\"\"Omit[Cls, \"name\",\"property\"]\n        class User(BaseModel):\n            id:int = Feild(...,primary_key=True)\n            name:str\n            password:str\n            avator:str\n        UserUpdate = Omit[User,\"id\"]\n    \"\"\"\n    def __class_getitem__(cls,items):",
        "detail": "src.testspace.utils.pydantictools",
        "documentation": {}
    },
    {
        "label": "partial_func_cached",
        "kind": 2,
        "importPath": "src.testspace.utils.pydantictools",
        "description": "src.testspace.utils.pydantictools",
        "peekOfCode": "def partial_func_cached(name,cls,exclude_params=[]):\n        annotations = cls.__annotations__.copy()\n        fields =  copy.deepcopy(cls.__fields__)\n        for i in annotations.keys():\n            if i in exclude_params:\n                continue\n            if cls.__module__ == typing:\n                if annotations[i].__origin__ == Union and annotations[i].__args__[1] == None:\n                    continue \n            annotations[i] = Optional[annotations[i]] # type: ignore",
        "detail": "src.testspace.utils.pydantictools",
        "documentation": {}
    },
    {
        "label": "omit_func_cached",
        "kind": 2,
        "importPath": "src.testspace.utils.pydantictools",
        "description": "src.testspace.utils.pydantictools",
        "peekOfCode": "def omit_func_cached(name,omit_cls,*omit_params):\n        annotations = omit_cls.__annotations__.copy()\n        fields = omit_cls.__fields__.copy()\n        for i in omit_params:\n            del annotations[i]\n            del fields[i]\n        NewType = type(name,(BaseModel,),{\n            \"__annotations__\":annotations,\n            \"__fields__\":fields,\n        })  ",
        "detail": "src.testspace.utils.pydantictools",
        "documentation": {}
    },
    {
        "label": "pick_func_cached",
        "kind": 2,
        "importPath": "src.testspace.utils.pydantictools",
        "description": "src.testspace.utils.pydantictools",
        "peekOfCode": "def pick_func_cached(name,pick_cls,*pick_params):\n        annotations = pick_cls.__annotations__.copy()\n        fields = pick_cls.__fields__.copy()\n        for i in set(annotations.keys()) - set(pick_params):\n            del annotations[i]\n            del fields[i]\n        _pydantic_type = type(name,(BaseModel,),{\n            \"__annotations__\":annotations,\n            \"__fields__\":fields,\n        })  ",
        "detail": "src.testspace.utils.pydantictools",
        "documentation": {}
    },
    {
        "label": "TypeWeakRef",
        "kind": 6,
        "importPath": "src.testspace.utils.TypeWeakref",
        "description": "src.testspace.utils.TypeWeakref",
        "peekOfCode": "class TypeWeakRef(Generic[T]):\n    def __init__(self, ref:T) -> None:\n        self.__ref = weakref.ref(ref)\n    def get(self) -> Optional[T]:\n        return self.__ref()",
        "detail": "src.testspace.utils.TypeWeakref",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "src.testspace.utils.TypeWeakref",
        "description": "src.testspace.utils.TypeWeakref",
        "peekOfCode": "T = TypeVar(\"T\")\nclass TypeWeakRef(Generic[T]):\n    def __init__(self, ref:T) -> None:\n        self.__ref = weakref.ref(ref)\n    def get(self) -> Optional[T]:\n        return self.__ref()",
        "detail": "src.testspace.utils.TypeWeakref",
        "documentation": {}
    },
    {
        "label": "register_routers",
        "kind": 2,
        "importPath": "src.testspace.apimanager",
        "description": "src.testspace.apimanager",
        "peekOfCode": "def register_routers(app: FastAPI):\n        router = APIRouter(prefix=\"/api\")\n        import testspace\n        from testspace.utils.libautoimport import Module\n        # get all modules in the routers package\n        have_router = lambda module: isinstance(module.router, APIRouter) if hasattr(module,'router') else False\n        root = Module(testspace)[\"api\"]\n        for m in root.iter_children():\n            if have_router(m.module):\n                router.include_router(m.router,prefix=\"/\"+m.name)   ",
        "detail": "src.testspace.apimanager",
        "documentation": {}
    },
    {
        "label": "TomlConfig",
        "kind": 6,
        "importPath": "src.testspace.config",
        "description": "src.testspace.config",
        "peekOfCode": "class TomlConfig:\n    def __init__(self, path):\n        self.path = path\n        self._dict = toml.load(path)\n    def __getitem__(self, key):\n        return self._dict.get(key)\n    def __getattr__(self, __name: str):\n        return DotMap(self._dict[__name])\n    def update(self):\n        toml.dump(self._dict,self.path.open(\"w\"))",
        "detail": "src.testspace.config",
        "documentation": {}
    },
    {
        "label": "get_data_dir",
        "kind": 2,
        "importPath": "src.testspace.config",
        "description": "src.testspace.config",
        "peekOfCode": "def get_data_dir(env):\n    DATA_DIR:Path = env.path(\"DATA_DIR\", default=PACKAGE_PATH.joinpath(\"data\"))\n    DATA_DIR.mkdir(exist_ok=True)\n    return DATA_DIR\nDATA_DIR = get_data_dir(env)\nROOT_PATH = DATA_DIR\nclass TomlConfig:\n    def __init__(self, path):\n        self.path = path\n        self._dict = toml.load(path)",
        "detail": "src.testspace.config",
        "documentation": {}
    },
    {
        "label": "PACKAGE_PATH",
        "kind": 5,
        "importPath": "src.testspace.config",
        "description": "src.testspace.config",
        "peekOfCode": "PACKAGE_PATH = Path(__file__).parent\nenv = Env()\nenv.read_env()\ndef get_data_dir(env):\n    DATA_DIR:Path = env.path(\"DATA_DIR\", default=PACKAGE_PATH.joinpath(\"data\"))\n    DATA_DIR.mkdir(exist_ok=True)\n    return DATA_DIR\nDATA_DIR = get_data_dir(env)\nROOT_PATH = DATA_DIR\nclass TomlConfig:",
        "detail": "src.testspace.config",
        "documentation": {}
    },
    {
        "label": "env",
        "kind": 5,
        "importPath": "src.testspace.config",
        "description": "src.testspace.config",
        "peekOfCode": "env = Env()\nenv.read_env()\ndef get_data_dir(env):\n    DATA_DIR:Path = env.path(\"DATA_DIR\", default=PACKAGE_PATH.joinpath(\"data\"))\n    DATA_DIR.mkdir(exist_ok=True)\n    return DATA_DIR\nDATA_DIR = get_data_dir(env)\nROOT_PATH = DATA_DIR\nclass TomlConfig:\n    def __init__(self, path):",
        "detail": "src.testspace.config",
        "documentation": {}
    },
    {
        "label": "DATA_DIR",
        "kind": 5,
        "importPath": "src.testspace.config",
        "description": "src.testspace.config",
        "peekOfCode": "DATA_DIR = get_data_dir(env)\nROOT_PATH = DATA_DIR\nclass TomlConfig:\n    def __init__(self, path):\n        self.path = path\n        self._dict = toml.load(path)\n    def __getitem__(self, key):\n        return self._dict.get(key)\n    def __getattr__(self, __name: str):\n        return DotMap(self._dict[__name])",
        "detail": "src.testspace.config",
        "documentation": {}
    },
    {
        "label": "ROOT_PATH",
        "kind": 5,
        "importPath": "src.testspace.config",
        "description": "src.testspace.config",
        "peekOfCode": "ROOT_PATH = DATA_DIR\nclass TomlConfig:\n    def __init__(self, path):\n        self.path = path\n        self._dict = toml.load(path)\n    def __getitem__(self, key):\n        return self._dict.get(key)\n    def __getattr__(self, __name: str):\n        return DotMap(self._dict[__name])\n    def update(self):",
        "detail": "src.testspace.config",
        "documentation": {}
    },
    {
        "label": "tomlconfig",
        "kind": 5,
        "importPath": "src.testspace.config",
        "description": "src.testspace.config",
        "peekOfCode": "tomlconfig = TomlConfig(DATA_DIR.joinpath(\"config.toml\"))\nSECRET_KEY = \"5aaca26c7bb7d1d8d2312498006db19cfe3953152a2541ab725ce8098c7d506c\"\napp_key = \"asdasd\"",
        "detail": "src.testspace.config",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "src.testspace.config",
        "description": "src.testspace.config",
        "peekOfCode": "SECRET_KEY = \"5aaca26c7bb7d1d8d2312498006db19cfe3953152a2541ab725ce8098c7d506c\"\napp_key = \"asdasd\"",
        "detail": "src.testspace.config",
        "documentation": {}
    },
    {
        "label": "app_key",
        "kind": 5,
        "importPath": "src.testspace.config",
        "description": "src.testspace.config",
        "peekOfCode": "app_key = \"asdasd\"",
        "detail": "src.testspace.config",
        "documentation": {}
    },
    {
        "label": "ShowType",
        "kind": 6,
        "importPath": "src.testspace.exceptions",
        "description": "src.testspace.exceptions",
        "peekOfCode": "class ShowType(IntEnum):\n    silent = 0\n    warn =1\n    error =2\n    notification = 4\n    page = 9\nclass AntdErrorResponse(BaseModel):\n    success: bool; # if request is success\n    data: Any; # response data\n    errorCode: str; # code for errorType",
        "detail": "src.testspace.exceptions",
        "documentation": {}
    },
    {
        "label": "AntdErrorResponse",
        "kind": 6,
        "importPath": "src.testspace.exceptions",
        "description": "src.testspace.exceptions",
        "peekOfCode": "class AntdErrorResponse(BaseModel):\n    success: bool; # if request is success\n    data: Any; # response data\n    errorCode: str; # code for errorType\n    errorMessage: str; # message display to user\n    showType: ShowType; #error display type： 0 silent; 1 message.warn; 2 message.error; 4 notification; 9 page\n    traceId: str; #Convenient for back-end Troubleshooting: unique request ID\n    host: str;# onvenient for backend Troubleshooting: host of current access server",
        "detail": "src.testspace.exceptions",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "src.testspace.instance",
        "description": "src.testspace.instance",
        "peekOfCode": "app = create_app(tomlconfig)",
        "detail": "src.testspace.instance",
        "documentation": {}
    },
    {
        "label": "get_log_level",
        "kind": 2,
        "importPath": "src.testspace.log",
        "description": "src.testspace.log",
        "peekOfCode": "def get_log_level(name:str):\n    log_level = [\"INFO\",\"DEBUG\"]\n    if name not in log_level:\n        raise Exception(f\"log level must be in {log_level}\")\n    return getattr(logging,name)\nFORMAT = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'\nFORMAT_2 = ' %(asctime)s - %(threadName)s :%(thread)d  p:%(process)d - %(name)s [%(filename)s:%(lineno)d]  :  %(message)s'\nfrom rich.logging import RichHandler\nrich_handler = RichHandler(\n    show_path=False,",
        "detail": "src.testspace.log",
        "documentation": {}
    },
    {
        "label": "FORMAT",
        "kind": 5,
        "importPath": "src.testspace.log",
        "description": "src.testspace.log",
        "peekOfCode": "FORMAT = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'\nFORMAT_2 = ' %(asctime)s - %(threadName)s :%(thread)d  p:%(process)d - %(name)s [%(filename)s:%(lineno)d]  :  %(message)s'\nfrom rich.logging import RichHandler\nrich_handler = RichHandler(\n    show_path=False,\n    show_time=False,\n    rich_tracebacks= False,\n    tracebacks_show_locals= False,\n    markup=True)\nlogging.basicConfig(",
        "detail": "src.testspace.log",
        "documentation": {}
    },
    {
        "label": "FORMAT_2",
        "kind": 5,
        "importPath": "src.testspace.log",
        "description": "src.testspace.log",
        "peekOfCode": "FORMAT_2 = ' %(asctime)s - %(threadName)s :%(thread)d  p:%(process)d - %(name)s [%(filename)s:%(lineno)d]  :  %(message)s'\nfrom rich.logging import RichHandler\nrich_handler = RichHandler(\n    show_path=False,\n    show_time=False,\n    rich_tracebacks= False,\n    tracebacks_show_locals= False,\n    markup=True)\nlogging.basicConfig(\n    level=\"NOTSET\", format=FORMAT_2, datefmt=\"[%x %X]\", handlers=[rich_handler], force=True",
        "detail": "src.testspace.log",
        "documentation": {}
    },
    {
        "label": "rich_handler",
        "kind": 5,
        "importPath": "src.testspace.log",
        "description": "src.testspace.log",
        "peekOfCode": "rich_handler = RichHandler(\n    show_path=False,\n    show_time=False,\n    rich_tracebacks= False,\n    tracebacks_show_locals= False,\n    markup=True)\nlogging.basicConfig(\n    level=\"NOTSET\", format=FORMAT_2, datefmt=\"[%x %X]\", handlers=[rich_handler], force=True\n)\nlog_level =  get_log_level(tomlconfig.logconfig.level)",
        "detail": "src.testspace.log",
        "documentation": {}
    },
    {
        "label": "log_level",
        "kind": 5,
        "importPath": "src.testspace.log",
        "description": "src.testspace.log",
        "peekOfCode": "log_level =  get_log_level(tomlconfig.logconfig.level)\nlogger = logging.getLogger(\"testspace\")\nlogger.setLevel(log_level)\nsqlalchemy_engine_logger = logging.getLogger('sqlalchemy.engine')\n# sqlalchemy_engine_logger.setLevel(log_level)\n# sqlalchemy_engine_logger.addHandler(rich_handler)\n# sqlalchemy_logger = logging.getLogger('sqlalchemy')\n# uvicorn_logger = logging.getLogger(\"uvicorn\")",
        "detail": "src.testspace.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.testspace.log",
        "description": "src.testspace.log",
        "peekOfCode": "logger = logging.getLogger(\"testspace\")\nlogger.setLevel(log_level)\nsqlalchemy_engine_logger = logging.getLogger('sqlalchemy.engine')\n# sqlalchemy_engine_logger.setLevel(log_level)\n# sqlalchemy_engine_logger.addHandler(rich_handler)\n# sqlalchemy_logger = logging.getLogger('sqlalchemy')\n# uvicorn_logger = logging.getLogger(\"uvicorn\")",
        "detail": "src.testspace.log",
        "documentation": {}
    },
    {
        "label": "sqlalchemy_engine_logger",
        "kind": 5,
        "importPath": "src.testspace.log",
        "description": "src.testspace.log",
        "peekOfCode": "sqlalchemy_engine_logger = logging.getLogger('sqlalchemy.engine')\n# sqlalchemy_engine_logger.setLevel(log_level)\n# sqlalchemy_engine_logger.addHandler(rich_handler)\n# sqlalchemy_logger = logging.getLogger('sqlalchemy')\n# uvicorn_logger = logging.getLogger(\"uvicorn\")",
        "detail": "src.testspace.log",
        "documentation": {}
    },
    {
        "label": "create_app",
        "kind": 2,
        "importPath": "src.testspace.setup",
        "description": "src.testspace.setup",
        "peekOfCode": "def create_app(tomlconfig:TomlConfig) -> FastAPI:\n    app = FastAPI()\n    app.state.config = tomlconfig\n    SQLALCHEMY_DATABASE_URL  = tomlconfig.database.SQLALCHEMY_DATABASE_URL\n    if tomlconfig.app.CHANNEL == 'dev':\n        SQLALCHEMY_DATABASE_URL = tomlconfig.database.SQLALCHEMY_DATABASE_URL_dev\n    elif tomlconfig.app.CHANNEL == \"release\":\n        SQLALCHEMY_DATABASE_URL = tomlconfig.database.SQLALCHEMY_DATABASE_URL\n    elif tomlconfig.app.CHANNEL == \"test\":\n        SQLALCHEMY_DATABASE_URL = tomlconfig.database.SQLALCHEMY_DATABASE_URL_test",
        "detail": "src.testspace.setup",
        "documentation": {}
    },
    {
        "label": "init_db_data",
        "kind": 2,
        "importPath": "src.testspace.setup",
        "description": "src.testspace.setup",
        "peekOfCode": "def init_db_data(engine):\n    from testspace.models.user import User, UserGroup\n    from testspace.components.auth import get_password_hash\n    from sqlmodel import select\n    from sqlmodel import Session\n    with Session(engine) as s:\n        admin  = s.exec(select(User).where(User.username == \"admin\")).first()\n        admin_group = s.exec(select(UserGroup).where(UserGroup.name == \"admin\")).first()\n        if not admin and not admin_group:\n            admin_group = UserGroup(**{\"name\":\"admin\",\"property\":{}})",
        "detail": "src.testspace.setup",
        "documentation": {}
    },
    {
        "label": "path",
        "kind": 5,
        "importPath": "setup",
        "description": "setup",
        "peekOfCode": "path = pathlib.Path(__file__).parent\nwith open(path.joinpath(\"README.md\"), \"r\", encoding=\"utf-8\") as fh:\n    long_description = fh.read()\nrequirements = []\nprint(path.joinpath(\"requirements.txt\"))\nwith open(path.joinpath(\"requirements.txt\")) as f:\n    requirements = f.readlines()\nprint(find_packages(where=\"src\"))\nsetup(\n    name=\"testspace\",",
        "detail": "setup",
        "documentation": {}
    },
    {
        "label": "requirements",
        "kind": 5,
        "importPath": "setup",
        "description": "setup",
        "peekOfCode": "requirements = []\nprint(path.joinpath(\"requirements.txt\"))\nwith open(path.joinpath(\"requirements.txt\")) as f:\n    requirements = f.readlines()\nprint(find_packages(where=\"src\"))\nsetup(\n    name=\"testspace\",\n    author=\"ddmonster.wei\",\n    author_email=\"ddmonster.wei@outlook.com\",\n    description=\"simple your test work\",",
        "detail": "setup",
        "documentation": {}
    }
]